--command for creating the database 
create database bigdatadb;
--command for activate the database for USE
use bigdatadb;
-- crerating the table in this database 
create table if not exists customer_id
(
    cus_id int,
    order_id int,
    supp_id int,
    cus_country varchar(50)
);
--inserting the va;lues in this table :
insert into customer_id values 
(1,100,200,'USA'),
(2,100,202,'INDIA'),
(4,102,203,'USA'),
(5,104,205,'INDIA'),
(6,106,204,'UK'),
(7,106,206,'UK'),
(9,104,206,'USA'),
(11,109,210,'INDIA');

-- showing the table with the inserted data
select * from customer_id;

-- write a query to find the country where have only 2 order are placed 
select cus_country from  customer_id GROUP BY cus_country HAVING count(*)=2;

create table if not exists customer_data
(
    cus_id int,
    order_id int,
    supp_id int,
    cus_country varchar(50),
    cus_state varchar(50)
);
insert into customer_data values 
(1,100,200,'USA','seattle'),
(2,100,202,'INDIA','goa'),
(4,102,203,'USA','Florida'),
(5,104,205,'INDIA','AP'),
(6,106,204,'UK','Manchester'),
(7,106,206,'UK','Manchester'),
(9,104,206,'USA','seattle'),
(11,109,210,'INDIA','goa');

select * from customer_data;
-- find out the distinct states from the each country 
select cus_country , GROUP_CONCAT(distinct(cus_state) SEPARATOR '-') as total_distinct_state from customer_data GROUP BY cus_country;

-- create a another table 
CREATE table if not exists employee
(
    id int,
    name varchar(50),
    salary DOUBLE,
    hiring_date DATE
);
insert into employee values
(1,'pravat',780000,'2021-02-12'),
(3,'rohan',45000,'2021-02-12'),
(4,'ramesh',56200,'2021-03-16'),
(6,'pinki',45210,'2022-10-21'),
(7,'raptee',52000,'2022-02-10'),
(9,'sourav',78450,'2021-09-30');

select * from employee;
-- find all the records who are getting the more salary than ramesh
select * from employee where salary >(select salary from employee where name='ramesh');

-- write a query to print all the order data placed in seattle and goa 
select * from customer_data where cus_state in ('seattle','goa');

-- given a table of the student's marks 
create table if not exists student_result
(
    stu_id int,
    name varchar(50),
    stu_marks int
);
insert into student_result values 
(1,'pravat',60),
(2,'pinak',96),
(5,'pamela',50),
(4,'suriya',64),
(6,'ram',75),
(8,'allu',88);

select * from student_result;

--write a query to find the grades based marks 
select stu_id,
       name,
       stu_marks,
       CASE
           when stu_marks >=90 then 'A+'
           when stu_marks >=85 and stu_marks <90 then 'A'
           when stu_marks >=75 and stu_marks <85 then 'B+'
           when stu_marks >=60 and stu_marks <75 then 'B'
           else 'C'
        end as grade_result
from student_result;


------------------------------------------------------------------------------------
29mar
create database test;

use test;

create table customers
(
    id int,
    name varchar(50)
);

create table orders
(
    order_id int,
    amount int,
    cust_id int
);

insert into customers values(1,'John');

insert into customers values(2,'David');

insert into customers values(3,'Ronn');

insert into customers values(4,'Betty');


insert into orders values(1,100,10);

insert into orders values(2,500,3);

insert into orders values(3,300,6);

insert into orders values(4,800,2);

insert into orders values(5,350,1);

select * from customers;

select * from orders;

# Get the orders information along with customers full details
# if order amount were greater than 400

select c.*,o.* 
from orders o
inner join customers c on o.cust_id=c.id
where o.amount >400;

select c.*,o.* 
from orders o
inner join customers c on o.cust_id=c.id and o.amount >400;


# Window Functions
create table shop_sales_data
(
sales_date date,
shop_id varchar(5),
sales_amount int
);

insert into shop_sales_data values('2022-02-14','S1',200);
insert into shop_sales_data values('2022-02-15','S1',300);
insert into shop_sales_data values('2022-02-14','S2',600);
insert into shop_sales_data values('2022-02-15','S3',500);
insert into shop_sales_data values('2022-02-18','S1',400);
insert into shop_sales_data values('2022-02-17','S2',250);
insert into shop_sales_data values('2022-02-20','S3',300);

# Total count of sales for each shop using window function
# Working functions - SUM(), MIN(), MAX(), COUNT(), AVG()

select *,
       sum(sales_amount) over(PARTITION BY shop_id ORDER BY sales_amount DESC) as total_amount
from  shop_sales_data; 

select *,
       sum(sales_amount) over(partition by shop_id  ) as total_sum_of_sales
from shop_sales_data;


create table amazon_sales_data
(
    sales_data date,
    sales_amount int
);

insert into amazon_sales_data values('2022-08-21',500);
insert into amazon_sales_data values('2022-08-22',600);
insert into amazon_sales_data values('2022-08-19',300);

insert into amazon_sales_data values('2022-08-18',200);

insert into amazon_sales_data values('2022-08-25',800);

# Query - Calculate the date wise rolling average of amazon sales

select * from amazon_sales_data;

select *,
    AVG(sales_amount) over(ORDER BY sales_data) as avarage_amount 
from amazon_sales_data;  

# Rank(), Row_Number(), Dense_Rank() window functions

insert into shop_sales_data values('2022-02-19','S1',400);
insert into shop_sales_data values('2022-02-20','S1',400);
insert into shop_sales_data values('2022-02-22','S1',300);
insert into shop_sales_data values('2022-02-25','S1',200);
insert into shop_sales_data values('2022-02-15','S2',600);
insert into shop_sales_data values('2022-02-16','S2',600);
insert into shop_sales_data values('2022-02-16','S3',500);
insert into shop_sales_data values('2022-02-18','S3',500);
insert into shop_sales_data values('2022-02-19','S3',300);

select * from shop_sales_data;
-- we are interesting in find the row number and rank and dense rank 
select *,
       ROW_NUMBER() over(PARTITION BY shop_id ORDER BY sales_amount DESC ) as row_counts,
       RANK() over(PARTITION BY shop_id ORDER BY sales_amount DESC ) as ranks,
       DENSE_RANK() over(PARTITION BY shop_id ORDER BY sales_amount DESC ) as densed_ranks
from  shop_sales_data;   

create table employees
(
    emp_id int,
    salary int,
    dept_name VARCHAR(30)

);

insert into employees values(1,10000,'Software');
insert into employees values(2,11000,'Software');
insert into employees values(3,11000,'Software');
insert into employees values(4,11000,'Software');
insert into employees values(5,15000,'Finance');
insert into employees values(6,15000,'Finance');
insert into employees values(7,15000,'IT');
insert into employees values(8,12000,'HR');
insert into employees values(9,12000,'HR');
insert into employees values(10,11000,'HR');

select * from employees;

# Query - get one employee from each department who is getting maximum salary (employee can be random if salary is same)
select 
    *
from (select *,
        row_number() over(partition by dept_name order by salary desc) as row_num
    from employees) as tmp
where row_num = 1;

select 
    tmp.*
from (select *,
        row_number() over(partition by dept_name order by salary desc) as row_num
    from employees) tmp
where tmp.row_num = 1;

-- Query - get all employees from each department who are getting maximum salary

select * from 
       (select *,
       dense_rank() over(PARTITION BY dept_name order by salary DESC ) as max_sal
from employees) as tmp
 where max_sal in (1,2) ; 

 select * from 
       (select *,
       dense_rank() over(PARTITION BY dept_name order by salary DESC ) as max_sal
from employees) as tmp
 where max_sal <=2 ; 
